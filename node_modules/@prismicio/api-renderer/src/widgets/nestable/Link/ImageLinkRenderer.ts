import { type ImageLinkContent, FilledImageLinkContent, LinkContent } from "@prismicio/types-internal/lib/content"

import type { LinkRendererOptions, RenderContext } from "../../../models"
import type { AnyLinkDef, LinkRenderer, MediaLinkDef } from "../../../models"

const ImageLinkRenderer: (
	ctx: RenderContext,
) => LinkRenderer<MediaLinkDef, LinkContent & { value: ImageLinkContent }, undefined, LinkRendererOptions> = (ctx) => ({
	renderV1(link: LinkContent & { value: ImageLinkContent }, _fetch: undefined, options?: LinkRendererOptions): unknown {
		return {
			type: "Link.image",
			value: {
				...(!options?.omitKey && { key: link.key }),
				image: {
					kind: link.value.kind,
					...(FilledImageLinkContent.is(link.value) && {
						id: link.value.id,
						url: ctx.urlRewriter.optimizeImageUrl(link.value.url),
						name: link.value.name,
						size: link.value.size,
						width: link.value.width,
						height: link.value.height,
					}),
					...(link.value.text && { text: link.value.text }),
				},
			},
		}
	},

	renderV2(
		def: MediaLinkDef | AnyLinkDef,
		link: LinkContent & { value: ImageLinkContent },
		_fetch: undefined,
		options?: LinkRendererOptions,
	): unknown {
		return {
			link_type: "Media",
			...(!options?.omitKey && { key: link.key }),
			kind: link.value.kind,
			...(FilledImageLinkContent.is(link.value) && {
				id: link.value.id,
				url: ctx.urlRewriter.optimizeImageUrl(link.value.url),
				name: link.value.name,
				size: link.value.size,
				width: link.value.width,
				height: link.value.height,
			}),
			...(def.allowText && link.value.text && { text: link.value.text }),
		}
	},

	renderMocks(
		def: MediaLinkDef | AnyLinkDef,
		link: LinkContent & { value: ImageLinkContent },
		options?: LinkRendererOptions,
	): unknown {
		return this.renderV2(def, link, undefined, options)
	},
})

export default ImageLinkRenderer
