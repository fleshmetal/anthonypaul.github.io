import type { LinkConfig } from "@prismicio/types-internal/lib/customtypes"
import { either } from "fp-ts"
import { pipe } from "fp-ts/lib/function"
import * as t from "io-ts"

const codec = t.partial({
	select: t.union([t.literal("any"), t.null, t.undefined]),
	allowText: t.boolean,
	repeat: t.boolean,
})

export type AnyLinkDef = Omit<t.TypeOf<typeof codec>, "select"> & {
	select: null
}
export const AnyLinkDef = new t.Type<AnyLinkDef>(
	"AnyLinkDef",
	(u: unknown): u is AnyLinkDef => (u as AnyLinkDef).select === "any",
	(u: unknown) => {
		return pipe(
			codec.decode(u),
			either.map((decoded) => {
				return {
					...decoded,
					select: null,
				}
			}),
		)
	},
	(l) => l,
)

export function defaultAnyLinkDef(config?: Omit<LinkConfig, "select" | "customtypes">): AnyLinkDef {
	return {
		select: null,
		allowText: true,
		...config,
	}
}
