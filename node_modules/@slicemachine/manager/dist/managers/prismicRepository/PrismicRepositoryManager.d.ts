import { BaseManager } from "../BaseManager";
import { PrismicRepository, TransactionalMergeArgs, TransactionalMergeReturnType, FrameworkWroomTelemetryID, StarterId, Environment, OnboardingState } from "./types";
type PrismicRepositoryManagerCheckExistsArgs = {
    domain: string;
};
type PrismicRepositoryManagerCreateArgs = {
    domain: string;
    framework: FrameworkWroomTelemetryID;
    starterId?: StarterId;
};
type PrismicRepositoryManagerDeleteArgs = {
    domain: string;
    password: string;
};
type PrismicRepositoryManagerPushDocumentsArgs = {
    domain: string;
    signature: string;
    documents: Record<string, unknown>;
};
type PrismicRepositoryManagerFetchEnvironmentsArgs = {
    /**
     * If set to `true`, all environments are returned regardless of the user's
     * permission level.
     *
     * If set to `false`, only environments the user can access are returned.
     *
     * @defaultValue `false`
     */
    includeAll?: boolean;
};
type PrismicRepositoryManagerFetchEnvironmentsReturnType = {
    environments?: Environment[];
};
export declare class PrismicRepositoryManager extends BaseManager {
    readAll(): Promise<PrismicRepository[]>;
    hasWriteAccess(repository: PrismicRepository): boolean;
    checkExists(args: PrismicRepositoryManagerCheckExistsArgs): Promise<boolean>;
    create(args: PrismicRepositoryManagerCreateArgs): Promise<void>;
    delete(args: PrismicRepositoryManagerDeleteArgs): Promise<void>;
    pushDocuments(args: PrismicRepositoryManagerPushDocumentsArgs): Promise<void>;
    pushChanges(args: TransactionalMergeArgs): Promise<TransactionalMergeReturnType>;
    fetchEnvironments(args?: PrismicRepositoryManagerFetchEnvironmentsArgs): Promise<PrismicRepositoryManagerFetchEnvironmentsReturnType>;
    fetchOnboarding(): Promise<OnboardingState>;
    toggleOnboardingStep(stepId: string): Promise<{
        completedSteps: string[];
    }>;
    completeOnboardingStep(...stepIds: string[]): Promise<{
        completedSteps: string[];
    }>;
    toggleOnboarding(): Promise<{
        isDismissed: boolean;
    }>;
    setDefaultMasterLocale(): Promise<void>;
    private _decodeLimitOrThrow;
    private _fetch;
}
export {};
