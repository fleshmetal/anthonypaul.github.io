{"version":3,"file":"decode.js","sources":["../../../src/lib/decode.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport { ZodType, ZodTypeDef } from \"zod\";\nimport * as E from \"fp-ts/Either\";\nimport { pipe } from \"fp-ts/function\";\n\nimport { DecodeError } from \"./DecodeError\";\n\nexport type DecodeReturnType<A, _O, I> =\n\t| {\n\t\t\tvalue: A;\n\t\t\terror?: never;\n\t  }\n\t| {\n\t\t\tvalue?: never;\n\t\t\terror: DecodeError<I>;\n\t  };\n\nfunction isZodSchema(value: unknown): value is ZodType<unknown> {\n\treturn (\n\t\ttypeof (value as ZodType<unknown>).safeParse === \"function\" &&\n\t\tvalue instanceof ZodType\n\t);\n}\n\nexport function decode<A, O, I>(\n\tcodec: ZodType<A, ZodTypeDef, unknown>,\n\tinput: I,\n): DecodeReturnType<A, O, I>;\nexport function decode<A, O, I>(\n\tcodec: t.Type<A, O, I> | ZodType<A, ZodTypeDef, unknown>,\n\tinput: I,\n): DecodeReturnType<A, O, I>;\nexport function decode<A, O, I>(\n\tcodec: t.Type<A, O, I> | ZodType<A, ZodTypeDef, unknown>,\n\tinput: I,\n): DecodeReturnType<A, O, I> {\n\tif (isZodSchema(codec)) {\n\t\tconst parsed = codec.safeParse(input);\n\n\t\tif (parsed.success) {\n\t\t\treturn { value: parsed.data };\n\t\t}\n\n\t\treturn { error: new DecodeError({ input, errors: parsed.error.errors }) };\n\t}\n\n\treturn pipe(\n\t\tcodec.decode(input),\n\t\tE.foldW(\n\t\t\t(errors) => {\n\t\t\t\treturn {\n\t\t\t\t\terror: new DecodeError({ input, errors }),\n\t\t\t\t};\n\t\t\t},\n\t\t\t(value) => {\n\t\t\t\treturn {\n\t\t\t\t\tvalue,\n\t\t\t\t};\n\t\t\t},\n\t\t),\n\t);\n}\n"],"names":["E.foldW"],"mappings":";;;;AAiBA,SAAS,YAAY,OAAc;AAClC,SACC,OAAQ,MAA2B,cAAc,cACjD,iBAAiB;AAEnB;AAUgB,SAAA,OACf,OACA,OAAQ;AAEJ,MAAA,YAAY,KAAK,GAAG;AACjB,UAAA,SAAS,MAAM,UAAU,KAAK;AAEpC,QAAI,OAAO,SAAS;AACZ,aAAA,EAAE,OAAO,OAAO;IACxB;AAEO,WAAA,EAAE,OAAO,IAAI,YAAY,EAAE,OAAO,QAAQ,OAAO,MAAM,OAAQ,CAAA;EACvE;AAEO,SAAA,KACN,MAAM,OAAO,KAAK,GAClBA,MACC,CAAC,WAAU;AACH,WAAA;AAAA,MACN,OAAO,IAAI,YAAY,EAAE,OAAO,QAAQ;AAAA,IAAA;AAAA,EAE1C,GACA,CAAC,UAAS;AACF,WAAA;AAAA,MACN;AAAA,IAAA;AAAA,EAED,CAAA,CACD;AAEH;"}