import { Schema as ZodType } from './../_node_modules/zod/lib/index.js';
import { foldW } from './../_node_modules/fp-ts/es6/Either.js';
import { pipe } from './../_node_modules/fp-ts/es6/function.js';
import { DecodeError } from "./DecodeError.js";
function isZodSchema(value) {
  return typeof value.safeParse === "function" && value instanceof ZodType;
}
function decode(codec, input) {
  if (isZodSchema(codec)) {
    const parsed = codec.safeParse(input);
    if (parsed.success) {
      return { value: parsed.data };
    }
    return { error: new DecodeError({ input, errors: parsed.error.errors }) };
  }
  return pipe(codec.decode(input), foldW((errors) => {
    return {
      error: new DecodeError({ input, errors })
    };
  }, (value) => {
    return {
      value
    };
  }));
}
export {
  decode
};
//# sourceMappingURL=decode.js.map
