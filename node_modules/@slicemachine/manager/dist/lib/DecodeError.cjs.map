{"version":3,"file":"DecodeError.cjs","sources":["../../../src/lib/DecodeError.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport { formatValidationErrors } from \"io-ts-reporters\";\nimport { ZodIssue } from \"zod\";\n\ntype DecodeErrorConstructorArgs<TInput = unknown> = {\n\tinput: TInput;\n\terrors: t.Errors | ZodIssue[];\n};\n\nfunction isZodIssueArray(errors: object[]): errors is ZodIssue[] {\n\treturn \"path\" in errors[0];\n}\n\nfunction formatZodErrors(errors: ZodIssue[]): string[] {\n\treturn errors.map((err) => {\n\t\tconst path = err.path.length > 0 ? ` at ${err.path.join(\".\")}` : \"\";\n\n\t\treturn `${err.message}${path}`;\n\t});\n}\n\nexport class DecodeError<TInput = unknown> extends Error {\n\tname = \"DecodeError\";\n\tinput: TInput;\n\terrors: string[];\n\n\tconstructor(args: DecodeErrorConstructorArgs<TInput>) {\n\t\tlet formattedErrors: string[] = [];\n\n\t\tif (isZodIssueArray(args.errors)) {\n\t\t\tformattedErrors = formatZodErrors(args.errors);\n\t\t} else {\n\t\t\tformattedErrors = formatValidationErrors(args.errors);\n\t\t}\n\n\t\tsuper(formattedErrors.join(\", \"));\n\n\t\tthis.input = args.input;\n\t\tthis.errors = formattedErrors;\n\t}\n}\n"],"names":["formatValidationErrors"],"mappings":";;;;;;;;;AASA,SAAS,gBAAgB,QAAgB;AACjC,SAAA,UAAU,OAAO,CAAC;AAC1B;AAEA,SAAS,gBAAgB,QAAkB;AACnC,SAAA,OAAO,IAAI,CAAC,QAAO;AACnB,UAAA,OAAO,IAAI,KAAK,SAAS,IAAI,OAAO,IAAI,KAAK,KAAK,GAAG,MAAM;AAE1D,WAAA,GAAG,IAAI,UAAU;AAAA,EAAA,CACxB;AACF;AAEM,MAAO,oBAAsC,MAAK;AAAA,EAKvD,YAAY,MAAwC;AACnD,QAAI,kBAA4B,CAAA;AAE5B,QAAA,gBAAgB,KAAK,MAAM,GAAG;AACf,wBAAA,gBAAgB,KAAK,MAAM;AAAA,IAAA,OACvC;AACY,wBAAAA,cAAA,uBAAuB,KAAK,MAAM;AAAA,IACrD;AAEM,UAAA,gBAAgB,KAAK,IAAI,CAAC;AAbjC,gCAAO;AACP;AACA;AAaC,SAAK,QAAQ,KAAK;AAClB,SAAK,SAAS;AAAA,EACf;AACA;;"}