"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const commonTags = require("common-tags");
const getJSFileExtension = require("../lib/getJSFileExtension.cjs");
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const nestRouteFilePath = (filePath, nesting) => {
  return [
    ...filePath.split("/").slice(0, 2),
    nesting,
    ...filePath.split("/").slice(2)
  ].join("/");
};
const documentationRead = async (data, { options, helpers }) => {
  if (data.kind === "PageSnippet") {
    const { model } = data.data;
    const pageDataExtension = await getJSFileExtension.getJSFileExtension({ helpers, options });
    const routePath = `src/routes/${model.repeatable ? "[uid]" : model.id}`;
    const dataFilePath = `${routePath}/+page.server.${pageDataExtension}`;
    const componentFilePath = `${routePath}/+page.svelte`;
    let dataFileContent;
    if (model.repeatable) {
      dataFileContent = commonTags.source`
				import { createClient } from "$lib/prismicio";

				export async function load({ params, fetch, cookies }) {
					const client = createClient({ fetch, cookies });

					const page = await client.getByUID("${model.id}", params.uid);

					return {
						page,
					};
				}

				export async function entries() {
					const client = createClient();

					const pages = await client.getAllByType("${model.id}");

					return pages.map((page) => {
						return { uid: page.uid };
					});
				}
			`;
    } else {
      dataFileContent = commonTags.source`
				import { createClient } from "$lib/prismicio";

				export async function load({ params, fetch, cookies }) {
					const client = createClient({ fetch, cookies });

					const page = await client.getSingle("${model.id}");

					return {
						page,
					};
				}

				export async function entries() {
					return [{}]
				}
			`;
    }
    let componentFileContent = commonTags.source(_a || (_a = __template(['\n			<script>\n				import { SliceZone } from "@prismicio/svelte";\n\n				import { components } from "$lib/slices";\n\n				export let data;\n			<\/script>\n\n			<SliceZone slices={data.page.data.slices} {components} />\n		'])));
    if (options.format) {
      dataFileContent = await helpers.format(dataFileContent, helpers.joinPathFromRoot(dataFilePath), {
        includeNewlineAtEnd: false
      });
      componentFileContent = await helpers.format(componentFileContent, helpers.joinPathFromRoot(componentFilePath), {
        prettier: {
          plugins: ["prettier-plugin-svelte"],
          parser: "svelte"
        },
        includeNewlineAtEnd: false
      });
    }
    const nestedDataFilePath = nestRouteFilePath(dataFilePath, "marketing");
    const nestedComponentFilePath = nestRouteFilePath(componentFilePath, "marketing");
    return [
      {
        label: "Default",
        content: commonTags.source`
					## Create your ${model.label}'s page data fetcher

					Add a new route by creating a \`${dataFilePath}\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`${nestedDataFilePath}\`.)

					Paste in this code:

					${`~~~${pageDataExtension} [${dataFilePath}]
${dataFileContent}
~~~`}

					## Create your ${model.label}'s page component

					In the route's directory, create a \`${componentFilePath}\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`${nestedComponentFilePath}\`.)

					Paste in this code:

					${`~~~svelte [${componentFilePath}]
${componentFileContent}
~~~`}

					Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/svelte-install) for more information.
				`
      }
    ];
  }
  return [];
};
exports.documentationRead = documentationRead;
//# sourceMappingURL=documentation-read.cjs.map
