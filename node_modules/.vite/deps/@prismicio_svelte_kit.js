import {
  cookie_exports,
  getToolbarSrc
} from "./chunk-WLSFXDXB.js";
import "./chunk-AYNHEKRI.js";
import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  add_location,
  append_hydration_dev,
  attr_dev,
  children,
  claim_element,
  detach_dev,
  dispatch_dev,
  element,
  head_selector,
  init,
  noop,
  onMount,
  safe_not_equal,
  src_url_equal,
  validate_slots
} from "./chunk-3XBAGWFC.js";
import "./chunk-2GBBIY5G.js";
import "./chunk-DC5AMYBS.js";

// node_modules/@prismicio/svelte/dist/kit/PrismicPreview.svelte
import { beforeNavigate, goto, invalidateAll } from "$app/navigation";
var file = "node_modules/@prismicio/svelte/dist/kit/PrismicPreview.svelte";
function create_fragment(ctx) {
  let script;
  let script_src_value;
  const block = {
    c: function create() {
      script = element("script");
      this.h();
    },
    l: function claim(nodes) {
      const head_nodes = head_selector("svelte-92dhp6", document.head);
      script = claim_element(head_nodes, "SCRIPT", { src: true });
      var script_nodes = children(script);
      script_nodes.forEach(detach_dev);
      head_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      script.defer = true;
      if (!src_url_equal(script.src, script_src_value = /*toolbarSrc*/
      ctx[0])) attr_dev(script, "src", script_src_value);
      add_location(script, file, 62, 1, 1524);
    },
    m: function mount(target, anchor) {
      append_hydration_dev(document.head, script);
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*toolbarSrc*/
      1 && !src_url_equal(script.src, script_src_value = /*toolbarSrc*/
      ctx2[0])) {
        attr_dev(script, "src", script_src_value);
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      detach_dev(script);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let toolbarSrc;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("PrismicPreview", slots, []);
  let { repositoryName } = $$props;
  let { routePrefix = "preview" } = $$props;
  let { routePrefixName = routePrefix } = $$props;
  let endingPreview = false;
  onMount(() => {
    const controller = new AbortController();
    window.addEventListener(
      "prismicPreviewUpdate",
      (event) => {
        event.preventDefault();
        invalidateAll();
      },
      { signal: controller.signal }
    );
    window.addEventListener(
      "prismicPreviewEnd",
      (event) => {
        event.preventDefault();
        endingPreview = true;
        goto(new URL(window.location.pathname.replace(new RegExp(`^(/${routePrefix}/?$|/${routePrefix}/)`), "/"), window.location.origin), { invalidateAll: true, noScroll: true });
      },
      { signal: controller.signal }
    );
    return () => {
      controller.abort();
    };
  });
  beforeNavigate((navigation) => {
    var _a, _b;
    if (navigation.to && ((_b = (_a = navigation.from) == null ? void 0 : _a.params) == null ? void 0 : _b[routePrefixName]) === routePrefix && !(routePrefixName in (navigation.to.params || {}))) {
      if (endingPreview) {
        endingPreview = false;
        return;
      }
      navigation.cancel();
      goto(new URL(routePrefix + navigation.to.url.pathname, navigation.to.url.origin));
    }
  });
  $$self.$$.on_mount.push(function() {
    if (repositoryName === void 0 && !("repositoryName" in $$props || $$self.$$.bound[$$self.$$.props["repositoryName"]])) {
      console.warn("<PrismicPreview> was created without expected prop 'repositoryName'");
    }
  });
  const writable_props = ["repositoryName", "routePrefix", "routePrefixName"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<PrismicPreview> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("repositoryName" in $$props2) $$invalidate(1, repositoryName = $$props2.repositoryName);
    if ("routePrefix" in $$props2) $$invalidate(2, routePrefix = $$props2.routePrefix);
    if ("routePrefixName" in $$props2) $$invalidate(3, routePrefixName = $$props2.routePrefixName);
  };
  $$self.$capture_state = () => ({
    onMount,
    getToolbarSrc,
    beforeNavigate,
    goto,
    invalidateAll,
    repositoryName,
    routePrefix,
    routePrefixName,
    endingPreview,
    toolbarSrc
  });
  $$self.$inject_state = ($$props2) => {
    if ("repositoryName" in $$props2) $$invalidate(1, repositoryName = $$props2.repositoryName);
    if ("routePrefix" in $$props2) $$invalidate(2, routePrefix = $$props2.routePrefix);
    if ("routePrefixName" in $$props2) $$invalidate(3, routePrefixName = $$props2.routePrefixName);
    if ("endingPreview" in $$props2) endingPreview = $$props2.endingPreview;
    if ("toolbarSrc" in $$props2) $$invalidate(0, toolbarSrc = $$props2.toolbarSrc);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*repositoryName*/
    2) {
      $: $$invalidate(0, toolbarSrc = getToolbarSrc(repositoryName));
    }
  };
  return [toolbarSrc, repositoryName, routePrefix, routePrefixName];
}
var PrismicPreview = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      repositoryName: 1,
      routePrefix: 2,
      routePrefixName: 3
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "PrismicPreview",
      options,
      id: create_fragment.name
    });
  }
  get repositoryName() {
    throw new Error("<PrismicPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set repositoryName(value) {
    throw new Error("<PrismicPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get routePrefix() {
    throw new Error("<PrismicPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set routePrefix(value) {
    throw new Error("<PrismicPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get routePrefixName() {
    throw new Error("<PrismicPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set routePrefixName(value) {
    throw new Error("<PrismicPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var PrismicPreview_default = PrismicPreview;

// node_modules/@prismicio/svelte/dist/kit/enableAutoPreviews.js
var enableAutoPreviews = (config) => {
  if (!config.cookies) {
    return;
  }
  const cookie = config.cookies.get(cookie_exports.preview);
  if (cookie && /\.prismic\.io/.test(cookie)) {
    config.client.queryContentFromRef(cookie);
  }
};

// node_modules/@prismicio/svelte/dist/kit/redirectToPreviewURL.js
var redirectToPreviewURL = async (config) => {
  const previewToken = new URL(config.request.url).searchParams.get("token") ?? void 0;
  const documentID = new URL(config.request.url).searchParams.get("documentId") ?? void 0;
  const routePrefix = config.routePrefix ?? "preview";
  const previewURL = await config.client.resolvePreviewURL({
    previewToken,
    documentID,
    defaultURL: config.defaultURL || "/"
  });
  if (previewToken) {
    config.cookies.set(cookie_exports.preview, previewToken, {
      path: "/",
      httpOnly: false
    });
  }
  return new Response(void 0, {
    status: 307,
    headers: {
      Location: "/" + routePrefix + previewURL
    }
  });
};
export {
  PrismicPreview_default as PrismicPreview,
  enableAutoPreviews,
  redirectToPreviewURL
};
//# sourceMappingURL=@prismicio_svelte_kit.js.map
