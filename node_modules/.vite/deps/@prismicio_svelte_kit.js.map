{
  "version": 3,
  "sources": ["../../@prismicio/svelte/dist/kit/PrismicPreview.svelte", "../../@prismicio/svelte/dist/kit/enableAutoPreviews.js", "../../@prismicio/svelte/dist/kit/redirectToPreviewURL.js"],
  "sourcesContent": [null, "import * as prismic from \"@prismicio/client\";\n/**\n * Configures a Prismic client to automatically query draft content during a\n * preview session.\n *\n * @param config - Configuration for the function.\n */\nexport const enableAutoPreviews = (config) => {\n    if (!config.cookies) {\n        return;\n    }\n    const cookie = config.cookies.get(prismic.cookie.preview);\n    // We only return the cookie if a Prismic Preview session is active.\n    //\n    // An inactive cookie looks like this (URL encoded):\n    // \t{\n    // \t\t\"_tracker\": \"abc123\"\n    // \t}\n    //\n    // An active cookie looks like this (URL encoded):\n    // \t{\n    // \t\t\"_tracker\": \"abc123\",\n    // \t\t\"example-prismic-repo.prismic.io\": {\n    // \t\t\tpreview: \"https://example-prismic-repo.prismic.io/previews/abc:123?websitePreviewId=xyz\"\n    // \t\t}\n    // \t}\n    if (cookie && /\\.prismic\\.io/.test(cookie)) {\n        config.client.queryContentFromRef(cookie);\n    }\n};\n", "import * as prismic from \"@prismicio/client\";\n/**\n * Redirects a visitor to the URL of a previewed Prismic document from within a\n * SvelteKit `+server` file.\n *\n * Return the created `Response` in your `+server` file.\n *\n * @example\n *\n * ```typescript\n * import { createClient } from \"../lib/prismicio.js\";\n * import { redirectToPreviewURL } from \"@prismicio/svelte/kit\";\n *\n * export async function GET({ fetch, request }) {\n * \tconst client = createClient({ fetch });\n *\n * \treturn await redirectToPreviewURL({ client, request });\n * }\n * ```\n */\nexport const redirectToPreviewURL = async (config) => {\n    const previewToken = new URL(config.request.url).searchParams.get(\"token\") ?? undefined;\n    const documentID = new URL(config.request.url).searchParams.get(\"documentId\") ?? undefined;\n    const routePrefix = config.routePrefix ?? \"preview\";\n    const previewURL = await config.client.resolvePreviewURL({\n        previewToken,\n        documentID,\n        defaultURL: config.defaultURL || \"/\",\n    });\n    // Prevent a flash of non-preview content by setting the preview token\n    // on the initial page load.\n    if (previewToken) {\n        config.cookies.set(prismic.cookie.preview, previewToken, {\n            path: \"/\",\n            httpOnly: false,\n        });\n    }\n    return new Response(undefined, {\n        status: 307,\n        headers: {\n            Location: \"/\" + routePrefix + previewURL,\n        },\n    });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;SAES,gBAAgB,MAAM,qBAAqB;;;;;;;;;;;;;;;;;;;;;MA4DhC,IAAU,CAAA,CAAA,EAAA,UAAA,QAAA,OAAA,gBAAA;;;;AAA7B,2BAAuC,SAAA,MAAA,MAAA;;;;;MAApBA,KAAU,CAAA,CAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;QA3DnB,eAAc,IAAA;QACd,cAAc,UAAS,IAAA;QACvB,kBAAkB,YAAW,IAAA;MAGpC,gBAAgB;AACpB,UAAO,MAAA;UACC,aAAU,IAAO,gBAAe;AACtC,WAAO;MACL;MACC,WAAK;AACJ,cAAM,eAAc;AACpB,sBAAa;;QAEb,QAAQ,WAAW,OAAM;;AAE7B,WAAO;MACL;MACC,WAAK;AACJ,cAAM,eAAc;AACpB,wBAAgB;AAChB,aAAI,IACE,IACF,OAAO,SAAS,SAAS,QAAO,IAC1B,OAAM,MAAO,WAAW,QAAQ,WAAW,IAAA,GAC/C,GAAE,GAEJ,OAAO,SAAS,MAAA,GAAA,EAGhB,eAAe,MACf,UAAU,KAAA,CAAA;;QAId,QAAQ,WAAW,OAAM;;;AAG3B,iBAAW,MAAK;;;AAGpB,iBAAgB,gBAAU;;QACpB,WAAW,QAAM,sBAAW,SAAX,mBAAiB,WAAjB,mBAA0B,sBAAqB,eAAW,EAAM,oBAAoB,WAAW,GAAG,UAAM,CAAA,KAAA;UACvH,eAAa;AACf,wBAAgB;;;AAGlB,iBAAW,OAAM;AACjB,WAAI,IACE,IACF,cAAc,WAAW,GAAG,IAAI,UAChC,WAAW,GAAG,IAAI,MAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhD1B,QAAC,cAAA,GACC,aAAa,cAAc,cAAc,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApC,IAAM,qBAAqB,CAAC,WAAW;AAC1C,MAAI,CAAC,OAAO,SAAS;AACjB;AAAA,EACJ;AACA,QAAM,SAAS,OAAO,QAAQ,IAAY,eAAO,OAAO;AAexD,MAAI,UAAU,gBAAgB,KAAK,MAAM,GAAG;AACxC,WAAO,OAAO,oBAAoB,MAAM;AAAA,EAC5C;AACJ;;;ACTO,IAAM,uBAAuB,OAAO,WAAW;AAClD,QAAM,eAAe,IAAI,IAAI,OAAO,QAAQ,GAAG,EAAE,aAAa,IAAI,OAAO,KAAK;AAC9E,QAAM,aAAa,IAAI,IAAI,OAAO,QAAQ,GAAG,EAAE,aAAa,IAAI,YAAY,KAAK;AACjF,QAAM,cAAc,OAAO,eAAe;AAC1C,QAAM,aAAa,MAAM,OAAO,OAAO,kBAAkB;AAAA,IACrD;AAAA,IACA;AAAA,IACA,YAAY,OAAO,cAAc;AAAA,EACrC,CAAC;AAGD,MAAI,cAAc;AACd,WAAO,QAAQ,IAAY,eAAO,SAAS,cAAc;AAAA,MACrD,MAAM;AAAA,MACN,UAAU;AAAA,IACd,CAAC;AAAA,EACL;AACA,SAAO,IAAI,SAAS,QAAW;AAAA,IAC3B,QAAQ;AAAA,IACR,SAAS;AAAA,MACL,UAAU,MAAM,cAAc;AAAA,IAClC;AAAA,EACJ,CAAC;AACL;",
  "names": ["ctx"]
}
